name: Release Management

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  version-check:
    name: Version and Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check package.json version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Validate version format
      run: |
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
        
    - name: Build application
      run: npm run build
      
    - name: Run tests
      run: npm test || echo "No tests configured yet"
      continue-on-error: true
      
    - name: Check for breaking changes
      run: |
        echo "Checking for potential breaking changes..."
        git diff HEAD~1 HEAD --name-only | grep -E "(package\.json|tsconfig\.json|vite\.config\.ts)" || echo "No configuration changes detected"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: version-check
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build production bundle
      run: npm run build
      
    - name: Create release bundle
      run: |
        tar -czf some-fitness-method-${{ github.ref_name }}.tar.gz dist/ package.json README.md
        
    - name: Generate changelog
      run: |
        echo "# Release ${{ github.ref_name }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes in this release:" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> RELEASE_NOTES.md
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: S.O.M.E fitness method ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        
    - name: Upload release bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./some-fitness-method-${{ github.ref_name }}.tar.gz
        asset_name: some-fitness-method-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
